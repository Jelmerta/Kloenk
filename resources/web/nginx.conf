limit_req_zone $binary_remote_addr zone=ratelimit_zone:10m rate=10r/s; # multiple requests are made to retrieve resources, when we use CDN we can maybe lower

server {
     listen 80 default_server;
     listen [::]:80 default_server;
     server_name _;
     return 301 https://$host$request_uri;  # Redirect all HTTP requests to HTTPS
}

server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name _;

        ssl_protocols TLSv1.2 TLSv1.3;

        # Prioritize forward secrecy ciphers (ECDHE suites)
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';

        # Prefer the server's cipher order
        ssl_prefer_server_ciphers off;

        ssl_certificate /etc/ssl/domain.cert.pem;
        ssl_certificate_key /etc/ssl/private.key.pem;

        ssl_stapling on;
        ssl_stapling_verify on;

        # Make sure to handle additional requests beyond rate limit immediately
        limit_req zone=ratelimit_zone burst=10 nodelay;
        limit_req_status 429;

        if_modified_since exact;

        root /usr/share/nginx/html;

        server_tokens off; # Don't expose nginx server version (lol this is open source)

        gzip on;
        gzip_types text/plain application/xml application/wasm image/jpg image/png;
        gzip_min_length 1000;

        set_secure_random_alphanum $cspNonce 32;

        add_header Cache-Control "public, no-cache" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Referrer-Policy "no-referrer" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'nonce-$cspNonce'; style-src 'self'; img-src 'self' data:; font-src 'self'; frame-ancestors 'none'; form-action 'none'" always; # we are adding nonce even if not relevant for the resource which costs some extra time. We could split up headers for different locations to save resources.
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always; # deprecated -> CSP is used instead
        add_header Permissions-Policy "accelerometer=(), autoplay=(), bluetooth=(), camera=(), display-capture=(self), encrypted-media=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), sync-xhr=(), usb=(self), web-share=(self)" always;

        location / {
            sub_filter_once off;  # Apply to all <script> tags
            sub_filter_types *;
            # There is an extra nonce generated by trunk... (no option to disable this in trunk?)
            body_filter_by_lua_block {
                local function remove_nonce(chunk)
                    -- Remove all occurrences of nonce attributes
                    return chunk:gsub(' nonce="%w+"', '')
                end

                ngx.arg[1] = remove_nonce(ngx.arg[1])
                return ngx.arg[1]
            }
            sub_filter '<script' '<script nonce="$cspNonce"';
            index index.html;
            try_files $uri $uri/ =404;
        }

        location ~* \.(wasm|jpg|png|ttf)$ {
            try_files $uri $uri/ =404;
        }
}
