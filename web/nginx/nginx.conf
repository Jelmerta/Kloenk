limit_req_zone $binary_remote_addr zone=ratelimit_zone:120m rate=20r/s; # multiple requests are made to retrieve resources, when we use CDN we can maybe lower

server {
     listen 80 default_server;
     listen [::]:80 default_server;
     server_name _;
     return 301 https://$host$request_uri;  # Redirect all HTTP requests to HTTPS
}

server {
        #listen 443 ssl default_server;
        listen 443 default_server;
        #listen [::]:443 ssl default_server;
        listen [::]:443 default_server;
        listen 443 quic reuseport;
        listen [::]:443 quic reuseport;
        server_name _;

#         ssl_protocols TLSv1.2 TLSv1.3;

         # Prioritize forward secrecy ciphers (ECDHE suites)
#         ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';

         # Prefer the server's cipher order
#         ssl_prefer_server_ciphers off;

#         ssl_certificate /etc/ssl/cert.pem;
#         ssl_certificate_key /etc/ssl/privkey.pem;

#         ssl_stapling on;
#         ssl_stapling_verify on;

        # Make sure to handle additional requests beyond rate limit immediately
        limit_req zone=ratelimit_zone burst=20 nodelay;
        limit_req_status 429;

        include mime.types;
        default_type application/octet-stream;  # Default type if no match is found

        types {
            audio/wav              wav;
            model/gltf+json        gltf;
            model/gltf-binary      glb;
            font/ttf               ttf;
        }

        if_modified_since exact;

        root /usr/share/nginx/html;

        server_tokens off; # Don't expose nginx server version (lol this is open source)

        gzip on;
        gzip_types text/plain application/xml application/wasm image/jpg image/png audio/wav audio/mp3 model/gltf-binary model/gltf+json application/octet-stream;
        gzip_min_length 1000;

        set_secure_random_alphanum $cspNonce 32;

        location / {
            include /etc/nginx/conf.d/common_headers.conf;
            sub_filter_once off;  # Apply to all <script> tags
            sub_filter_types *;
            sub_filter '<script' '<script nonce="$cspNonce"';
            sub_filter '<style' '<style nonce="$cspNonce"';
            index index.html;
            try_files $uri $uri/ =404;
        }

        location ~* \.(ico|js|wasm|jpg|png|ttf|mp3|wav|gltf|glb|bin)$ {
            include /etc/nginx/conf.d/common_headers.conf;
            try_files $uri $uri/ =404;
        }
}
