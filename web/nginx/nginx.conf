events {
    worker_connections 1024;
}

http {

    limit_req_zone $binary_remote_addr zone=ratelimit_zone:120m rate=20r/s; # multiple requests are made to retrieve resources, when we use CDN we can maybe lower

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # ACME challenge directory
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot-acme;
            try_files $uri =404;
        }

        # Redirect all other HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
         }
    }

    # TODO maybe other port 8443
    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
    #     listen 443 quic reuseport; # TODO not reuseport?
    #     listen [::]:443 quic reuseport;
        server_name _;

        ssl_protocols TLSv1.2 TLSv1.3;

        # Prioritize forward secrecy ciphers (ECDHE suites)
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';

        # Prefer the server's cipher order
        ssl_prefer_server_ciphers off;

        ssl_certificate /etc/ssl/cert.pem;
        ssl_certificate_key /etc/ssl/privkey.pem;

        ssl_stapling on;
#         ssl_stapling_verify on; BoringSSL not supported? https://stackoverflow.com/questions/74009118/nginx-warn-ssl-stapling-ignored-not-supported

        # Make sure to handle additional requests beyond rate limit immediately
        limit_req zone=ratelimit_zone burst=20 nodelay;
        limit_req_status 429;

    # #     # Enable HTTP/3
    #     add_header Alt-Svc 'h3=":443"; ma=86400';
    # #
    # #     # Handling Quic/WebTransport hopefully
    #     quic_retry on; # Address validation: https://datatracker.ietf.org/doc/html/rfc9000#name-address-validation
    #     ssl_early_data on; # 0-RTT (dont think supported in openresty, need some specific SSL implementation: https://nginx.org/en/docs/quic.html)
    #



           # WebTransport requires these headers
           # add_header 'Access-Control-Allow-Origin' '*';
            #add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
           # add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type';


        # quic_gso on

        include mime.types;
        default_type application/octet-stream;  # Default type if no match is found

        types {
            audio/wav              wav;
            model/gltf+json        gltf;
            model/gltf-binary      glb;
            font/ttf               ttf;
        }

        if_modified_since exact;

        root /usr/share/nginx/html;

        server_tokens off; # Don't expose nginx server version (lol this is open source)

        gzip on;
        gzip_types text/plain application/xml application/wasm image/jpg image/png audio/wav audio/mp3 model/gltf-binary model/gltf+json application/octet-stream;
        gzip_min_length 1000;

        set_secure_random_alphanum $cspNonce 32;

        location / {
            include /usr/share/nginx/conf/common_headers.conf;
            sub_filter_once off;  # Apply to all <script> tags
            sub_filter_types *;
            sub_filter '<script' '<script nonce="$cspNonce"';
            sub_filter '<style' '<style nonce="$cspNonce"';
            index index.html;
            try_files $uri $uri/ =404;
        }

        location ~* \.(ico|js|wasm|jpg|png|ttf|mp3|wav|gltf|glb|bin)$ {
            include /usr/share/nginx/conf/common_headers.conf;
            try_files $uri $uri/ =404;
        }
    }
}